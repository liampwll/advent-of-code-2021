#lang racket

(define (solve commands)
  (let loop ((commands commands)
             (horiz 0)
             (depth 0))
    (if (null? commands)
        (* horiz depth)
        (let ((direction (caar commands))
              (distance (cadar commands))
              (rest (cdr commands)))
          (display direction)
          (display distance)
          (case direction
            (("down") (loop rest horiz (+ depth distance)))
            (("up") (loop rest horiz (- depth distance)))
            (("forward") (loop rest (+ horiz distance) depth)))))))

(define (solve2 commands)
  (let loop ((commands commands)
             (horiz 0)
             (depth 0)
             (aim 0))
    (if (null? commands)
        (* horiz depth)
        (let ((direction (caar commands))
              (distance (cadar commands))
              (rest (cdr commands)))
          (display direction)
          (display distance)
          (case direction
            (("down") (loop rest horiz depth (+ aim distance)))
            (("up") (loop rest horiz depth (- aim distance)))
            (("forward") (loop rest (+ horiz distance) (+ depth (* aim distance)) aim)))))))

(define (line->command line)
  (let ((split (string-split line)))
    (list (car split) (string->number (cadr split)))))

(let ((commands (map line->command (file->lines "2.txt"))))
  (display (solve commands))
  (display "\n")
  (display (solve2 commands))
  (display "\n"))
